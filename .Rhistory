devtools::document()
devtools::document()
devtools::document()
devtools::use_vignette("introduction")
devtools::build_vignettes("introduction")
install.packages("usethis")
install.packages("usethis")
devtools::use_vignette("introduction")
devtools::document()
devtools::document()
?VirualTab
help(get_rd_num)
help(VirtualTab)
library(VirtualTab)
help(VirtualTab)
devtools::document()
help(VirtualTab)
VirtualTab::system.file()
VirtualTab::library.dynam.unload()
is.numeric(NULL)
maxRounds = NULL
if(!(is.numeric(maxRounds) | is.null(maxRounds))){
stop("maxRounds must be a numeric value")
}
maxRounds = 3L
if(!(is.numeric(maxRounds) | is.null(maxRounds))){
stop("maxRounds must be a numeric value")
}
maxRounds = ""
if(!(is.numeric(maxRounds) | is.null(maxRounds))){
stop("maxRounds must be a numeric value")
}
maxRounds = 3
if(!(is.numeric(maxRounds) | is.null(maxRounds))){
stop("maxRounds must be a numeric value")
}
#' debate round. The function checks to see if the input is less than
#' the maximum number of rounds in the tournament, greater than 0, and
#' that all debates in the previous round has been completed. If any of
#' these conditions are not satisfied, it will ask the user to input a
#' different round number. To exit the loop, the user can type `quit`
#' and the function will return NULL.
#'
#' @param maxRounds: The maximum number of rounds in the tournament (numeric)
#' @return The user inputed round number
#' @export
get_rd_num <- function(maxRounds=NULL){
# Throw an error if maxRounds is not numeric or null
if(!(is.numeric(maxRounds) | is.null(maxRounds))){
stop("maxRounds must be a numeric value")
}
# User provides round number
RoundNum <- readline(prompt="Round Number: ")
# Allow user to cancel entry
if(RoundNum == "quit"){return(NULL)}
# If maxRounds numeric, check it is between 1 and maxRounds
if(is.numeric(maxRounds)){
# Validate Round Number between 1 and max round
while(!RoundNum %in% as.character(1:maxRounds)){
# Information about why input is invalid
writeLines(paste0("Please write a round between 1 and ", maxRounds))
# Repeat prompt
RoundNum <- readline(prompt="Round Number: ")
# Alow user to quit entry
if(RoundNum == "quit"){return(NULL)}
}
}
# TODO: check if all entries in previous round are filled
# Return the Round number
return(RoundNum)
}
get_rd_num()
as.numeric(NULL)
get_room()
VirtualTab::get_room()
VirtualTab::library.dynam.unload()
devtools::document()
devtools::document()
VirtualTab::get_room()
devtools::document()
devtools::document()
devtools::document()
devtools::document()
is.null(c(4, 5))
"quit" == (4, 5)
"quit" == c(4, 5)
get_speaks <- function(){
# User provides how many speaks Aff got
AffSpeaks <- readline(prompt="Aff Total Speaks: ")
# Allow user to cancel entry
if(AffSpeaks == "quit"){return(AffSpeaks)}
# TODO validate that speaks are numeric (or quit)
# Validate Speaks are within an acceptable range
while(AffSpeaks %in% as.character(3:7)){
# More information about why entry failed
writeLines("Speaks for a team must be between 3 and 7")
# Repeat prompt
AffSpeaks <- readline(prompt="Aff Total Speaks: ")
# Allow user to cancel entry
if(AffSpeaks == "quit"){return(AffSpeaks)}
}
# Determine Neg speaks from Aff speaks
AffSpeaks <- as.numeric(AffSpeaks)
NegSpeaks <- 10 - AffSpeaks
# Return speaks
return(c(AffSpeaks, NegSpeaks))
}
get_speaks()
get_speaks <- function(){
# User provides how many speaks Aff got
AffSpeaks <- readline(prompt="Aff Total Speaks: ")
# Allow user to cancel entry
if(AffSpeaks == "quit"){return(AffSpeaks)}
# TODO validate that speaks are numeric (or quit)
# Validate Speaks are within an acceptable range
while(!AffSpeaks %in% as.character(3:7)){
# More information about why entry failed
writeLines("Speaks for a team must be between 3 and 7")
# Repeat prompt
AffSpeaks <- readline(prompt="Aff Total Speaks: ")
# Allow user to cancel entry
if(AffSpeaks == "quit"){return(AffSpeaks)}
}
# Determine Neg speaks from Aff speaks
AffSpeaks <- as.numeric(AffSpeaks)
NegSpeaks <- 10 - AffSpeaks
# Return speaks
return(c(AffSpeaks, NegSpeaks))
}
get_speaks()
get_speaks()
get_speaks()
get_speaks <- function(){
# User provides how many speaks Aff got
AffSpeaks <- readline(prompt="Aff Total Speaks: ")
# Allow user to cancel entry
if(AffSpeaks == "quit"){return(AffSpeaks)}
# TODO validate that speaks are numeric (or quit)
# Validate Speaks are within an acceptable range
while(!AffSpeaks %in% as.character(3:7)){
# More information about why entry failed
writeLines("Speaks for a team must be integers between 3 and 7")
# Repeat prompt
AffSpeaks <- readline(prompt="Aff Total Speaks: ")
# Allow user to cancel entry
if(AffSpeaks == "quit"){return(AffSpeaks)}
}
# Determine Neg speaks from Aff speaks
AffSpeaks <- as.numeric(AffSpeaks)
NegSpeaks <- 10 - AffSpeaks
# Return speaks
return(c(AffSpeaks, NegSpeaks))
}
get_speaks()
get_speaks()
devtools::uses_testthat()
devtools::use_testthat()
devtools::use_testthat()
usethis::use_testthat()
install.packages("usethis")
install.packages("usethis")
usethis::use_testthat()
use_test()
usethis::use_test()
usethis::use_testthat()
library(usethis)
?use_testthat
library(VirtualTab)
usethis::use_test("test_user_input")
usethis::use_test("test_user_input")
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
testthat::test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
usethis::use_testthat()
usethis::use_test()
usethis::use_test(name = "test-test_user_input")
usethis::use_test(name = "test_user_input")
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
library(usethis)
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
library(testthat)
test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
testthat::test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
1+1
testthat::test_that("multiplication works", {
expect_equal(2 * 2, 4)
})
testthat::test_that("multiplication works", {
testthat::expect_equal(2 * 2, 4)
})
testthat::test_check()
testthat::test_check(VirtualTab)
testthat::test_check(VirtualTab)
testthat::test_check("VirtualTab")
library(VirtualTab)
